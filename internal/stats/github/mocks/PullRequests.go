// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v70/github"
	mock "github.com/stretchr/testify/mock"
)

// PullRequests is an autogenerated mock type for the PullRequests type
type PullRequests struct {
	mock.Mock
}

type PullRequests_Expecter struct {
	mock *mock.Mock
}

func (_m *PullRequests) EXPECT() *PullRequests_Expecter {
	return &PullRequests_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *PullRequests) List(_a0 context.Context, _a1 string, _a2 string, _a3 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*github.PullRequest
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestListOptions) []*github.PullRequest); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.PullRequestListOptions) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.PullRequestListOptions) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PullRequests_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PullRequests_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 *github.PullRequestListOptions
func (_e *PullRequests_Expecter) List(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *PullRequests_List_Call {
	return &PullRequests_List_Call{Call: _e.mock.On("List", _a0, _a1, _a2, _a3)}
}

func (_c *PullRequests_List_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 *github.PullRequestListOptions)) *PullRequests_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*github.PullRequestListOptions))
	})
	return _c
}

func (_c *PullRequests_List_Call) Return(_a0 []*github.PullRequest, _a1 *github.Response, _a2 error) *PullRequests_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PullRequests_List_Call) RunAndReturn(run func(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)) *PullRequests_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewPullRequests creates a new instance of PullRequests. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPullRequests(t interface {
	mock.TestingT
	Cleanup(func())
}) *PullRequests {
	mock := &PullRequests{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
