// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/go-github/v73/github"
	mock "github.com/stretchr/testify/mock"
)

// NewRepositories creates a new instance of Repositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositories(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repositories {
	mock := &Repositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

type Repositories_Expecter struct {
	mock *mock.Mock
}

func (_m *Repositories) EXPECT() *Repositories_Expecter {
	return &Repositories_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type Repositories
func (_mock *Repositories) Get(context1 context.Context, s string, s1 string) (*github.Repository, *github.Response, error) {
	ret := _mock.Called(context1, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *github.Repository
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*github.Repository, *github.Response, error)); ok {
		return returnFunc(context1, s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *github.Repository); ok {
		r0 = returnFunc(context1, s, s1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = returnFunc(context1, s, s1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(context1, s, s1)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Repositories_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repositories_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
func (_e *Repositories_Expecter) Get(context1 interface{}, s interface{}, s1 interface{}) *Repositories_Get_Call {
	return &Repositories_Get_Call{Call: _e.mock.On("Get", context1, s, s1)}
}

func (_c *Repositories_Get_Call) Run(run func(context1 context.Context, s string, s1 string)) *Repositories_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Repositories_Get_Call) Return(repository *github.Repository, response *github.Response, err error) *Repositories_Get_Call {
	_c.Call.Return(repository, response, err)
	return _c
}

func (_c *Repositories_Get_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string) (*github.Repository, *github.Response, error)) *Repositories_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function for the type Repositories
func (_mock *Repositories) ListByUser(context1 context.Context, s string, repositoryListByUserOptions *github.RepositoryListByUserOptions) ([]*github.Repository, *github.Response, error) {
	ret := _mock.Called(context1, s, repositoryListByUserOptions)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*github.Repository
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *github.RepositoryListByUserOptions) ([]*github.Repository, *github.Response, error)); ok {
		return returnFunc(context1, s, repositoryListByUserOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *github.RepositoryListByUserOptions) []*github.Repository); ok {
		r0 = returnFunc(context1, s, repositoryListByUserOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *github.RepositoryListByUserOptions) *github.Response); ok {
		r1 = returnFunc(context1, s, repositoryListByUserOptions)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, *github.RepositoryListByUserOptions) error); ok {
		r2 = returnFunc(context1, s, repositoryListByUserOptions)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Repositories_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type Repositories_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - repositoryListByUserOptions *github.RepositoryListByUserOptions
func (_e *Repositories_Expecter) ListByUser(context1 interface{}, s interface{}, repositoryListByUserOptions interface{}) *Repositories_ListByUser_Call {
	return &Repositories_ListByUser_Call{Call: _e.mock.On("ListByUser", context1, s, repositoryListByUserOptions)}
}

func (_c *Repositories_ListByUser_Call) Run(run func(context1 context.Context, s string, repositoryListByUserOptions *github.RepositoryListByUserOptions)) *Repositories_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *github.RepositoryListByUserOptions
		if args[2] != nil {
			arg2 = args[2].(*github.RepositoryListByUserOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Repositories_ListByUser_Call) Return(repositorys []*github.Repository, response *github.Response, err error) *Repositories_ListByUser_Call {
	_c.Call.Return(repositorys, response, err)
	return _c
}

func (_c *Repositories_ListByUser_Call) RunAndReturn(run func(context1 context.Context, s string, repositoryListByUserOptions *github.RepositoryListByUserOptions) ([]*github.Repository, *github.Response, error)) *Repositories_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewPullRequests creates a new instance of PullRequests. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPullRequests(t interface {
	mock.TestingT
	Cleanup(func())
}) *PullRequests {
	mock := &PullRequests{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PullRequests is an autogenerated mock type for the PullRequests type
type PullRequests struct {
	mock.Mock
}

type PullRequests_Expecter struct {
	mock *mock.Mock
}

func (_m *PullRequests) EXPECT() *PullRequests_Expecter {
	return &PullRequests_Expecter{mock: &_m.Mock}
}

// List provides a mock function for the type PullRequests
func (_mock *PullRequests) List(context1 context.Context, s string, s1 string, pullRequestListOptions *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	ret := _mock.Called(context1, s, s1, pullRequestListOptions)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*github.PullRequest
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)); ok {
		return returnFunc(context1, s, s1, pullRequestListOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *github.PullRequestListOptions) []*github.PullRequest); ok {
		r0 = returnFunc(context1, s, s1, pullRequestListOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *github.PullRequestListOptions) *github.Response); ok {
		r1 = returnFunc(context1, s, s1, pullRequestListOptions)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, *github.PullRequestListOptions) error); ok {
		r2 = returnFunc(context1, s, s1, pullRequestListOptions)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// PullRequests_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PullRequests_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
//   - pullRequestListOptions *github.PullRequestListOptions
func (_e *PullRequests_Expecter) List(context1 interface{}, s interface{}, s1 interface{}, pullRequestListOptions interface{}) *PullRequests_List_Call {
	return &PullRequests_List_Call{Call: _e.mock.On("List", context1, s, s1, pullRequestListOptions)}
}

func (_c *PullRequests_List_Call) Run(run func(context1 context.Context, s string, s1 string, pullRequestListOptions *github.PullRequestListOptions)) *PullRequests_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *github.PullRequestListOptions
		if args[3] != nil {
			arg3 = args[3].(*github.PullRequestListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PullRequests_List_Call) Return(pullRequests []*github.PullRequest, response *github.Response, err error) *PullRequests_List_Call {
	_c.Call.Return(pullRequests, response, err)
	return _c
}

func (_c *PullRequests_List_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string, pullRequestListOptions *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)) *PullRequests_List_Call {
	_c.Call.Return(run)
	return _c
}
