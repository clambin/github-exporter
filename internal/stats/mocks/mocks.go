// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/clambin/github-exporter/internal/stats/github"
	mock "github.com/stretchr/testify/mock"
)

// NewGitHubClient creates a new instance of GitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubClient {
	mock := &GitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitHubClient is an autogenerated mock type for the GitHubClient type
type GitHubClient struct {
	mock.Mock
}

type GitHubClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GitHubClient) EXPECT() *GitHubClient_Expecter {
	return &GitHubClient_Expecter{mock: &_m.Mock}
}

// GetPullRequestCount provides a mock function for the type GitHubClient
func (_mock *GitHubClient) GetPullRequestCount(context1 context.Context, s string, s1 string) (int, error) {
	ret := _mock.Called(context1, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return returnFunc(context1, s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = returnFunc(context1, s, s1)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(context1, s, s1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitHubClient_GetPullRequestCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestCount'
type GitHubClient_GetPullRequestCount_Call struct {
	*mock.Call
}

// GetPullRequestCount is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
func (_e *GitHubClient_Expecter) GetPullRequestCount(context1 interface{}, s interface{}, s1 interface{}) *GitHubClient_GetPullRequestCount_Call {
	return &GitHubClient_GetPullRequestCount_Call{Call: _e.mock.On("GetPullRequestCount", context1, s, s1)}
}

func (_c *GitHubClient_GetPullRequestCount_Call) Run(run func(context1 context.Context, s string, s1 string)) *GitHubClient_GetPullRequestCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GitHubClient_GetPullRequestCount_Call) Return(n int, err error) *GitHubClient_GetPullRequestCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *GitHubClient_GetPullRequestCount_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string) (int, error)) *GitHubClient_GetPullRequestCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoStats provides a mock function for the type GitHubClient
func (_mock *GitHubClient) GetRepoStats(context1 context.Context, s string, s1 string) (github.RepoStats, error) {
	ret := _mock.Called(context1, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoStats")
	}

	var r0 github.RepoStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (github.RepoStats, error)); ok {
		return returnFunc(context1, s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) github.RepoStats); ok {
		r0 = returnFunc(context1, s, s1)
	} else {
		r0 = ret.Get(0).(github.RepoStats)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(context1, s, s1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitHubClient_GetRepoStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoStats'
type GitHubClient_GetRepoStats_Call struct {
	*mock.Call
}

// GetRepoStats is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
func (_e *GitHubClient_Expecter) GetRepoStats(context1 interface{}, s interface{}, s1 interface{}) *GitHubClient_GetRepoStats_Call {
	return &GitHubClient_GetRepoStats_Call{Call: _e.mock.On("GetRepoStats", context1, s, s1)}
}

func (_c *GitHubClient_GetRepoStats_Call) Run(run func(context1 context.Context, s string, s1 string)) *GitHubClient_GetRepoStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GitHubClient_GetRepoStats_Call) Return(repoStats github.RepoStats, err error) *GitHubClient_GetRepoStats_Call {
	_c.Call.Return(repoStats, err)
	return _c
}

func (_c *GitHubClient_GetRepoStats_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string) (github.RepoStats, error)) *GitHubClient_GetRepoStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRepoNames provides a mock function for the type GitHubClient
func (_mock *GitHubClient) GetUserRepoNames(context1 context.Context, s string) ([]string, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRepoNames")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitHubClient_GetUserRepoNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRepoNames'
type GitHubClient_GetUserRepoNames_Call struct {
	*mock.Call
}

// GetUserRepoNames is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *GitHubClient_Expecter) GetUserRepoNames(context1 interface{}, s interface{}) *GitHubClient_GetUserRepoNames_Call {
	return &GitHubClient_GetUserRepoNames_Call{Call: _e.mock.On("GetUserRepoNames", context1, s)}
}

func (_c *GitHubClient_GetUserRepoNames_Call) Run(run func(context1 context.Context, s string)) *GitHubClient_GetUserRepoNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitHubClient_GetUserRepoNames_Call) Return(strings []string, err error) *GitHubClient_GetUserRepoNames_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *GitHubClient_GetUserRepoNames_Call) RunAndReturn(run func(context1 context.Context, s string) ([]string, error)) *GitHubClient_GetUserRepoNames_Call {
	_c.Call.Return(run)
	return _c
}
