// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v53/github"
	mock "github.com/stretchr/testify/mock"
)

// GitHubClient is an autogenerated mock type for the GitHubClient type
type GitHubClient struct {
	mock.Mock
}

// GetPullRequests provides a mock function with given fields: _a0, _a1
func (_m *GitHubClient) GetPullRequests(_a0 context.Context, _a1 string) ([]*github.PullRequest, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*github.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*github.PullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*github.PullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepo provides a mock function with given fields: _a0, _a1
func (_m *GitHubClient) GetRepo(_a0 context.Context, _a1 string) (*github.Repository, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*github.Repository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.Repository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRepos provides a mock function with given fields: _a0, _a1
func (_m *GitHubClient) GetUserRepos(_a0 context.Context, _a1 string) ([]*github.Repository, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*github.Repository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*github.Repository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGitHubClient creates a new instance of GitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubClient {
	mock := &GitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
