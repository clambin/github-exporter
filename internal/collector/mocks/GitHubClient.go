// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v58/github"
	mock "github.com/stretchr/testify/mock"
)

// GitHubClient is an autogenerated mock type for the GitHubClient type
type GitHubClient struct {
	mock.Mock
}

type GitHubClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GitHubClient) EXPECT() *GitHubClient_Expecter {
	return &GitHubClient_Expecter{mock: &_m.Mock}
}

// GetPullRequests provides a mock function with given fields: _a0, _a1
func (_m *GitHubClient) GetPullRequests(_a0 context.Context, _a1 string) ([]*github.PullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequests")
	}

	var r0 []*github.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*github.PullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*github.PullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitHubClient_GetPullRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequests'
type GitHubClient_GetPullRequests_Call struct {
	*mock.Call
}

// GetPullRequests is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *GitHubClient_Expecter) GetPullRequests(_a0 interface{}, _a1 interface{}) *GitHubClient_GetPullRequests_Call {
	return &GitHubClient_GetPullRequests_Call{Call: _e.mock.On("GetPullRequests", _a0, _a1)}
}

func (_c *GitHubClient_GetPullRequests_Call) Run(run func(_a0 context.Context, _a1 string)) *GitHubClient_GetPullRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitHubClient_GetPullRequests_Call) Return(_a0 []*github.PullRequest, _a1 error) *GitHubClient_GetPullRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitHubClient_GetPullRequests_Call) RunAndReturn(run func(context.Context, string) ([]*github.PullRequest, error)) *GitHubClient_GetPullRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepo provides a mock function with given fields: _a0, _a1
func (_m *GitHubClient) GetRepo(_a0 context.Context, _a1 string) (*github.Repository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRepo")
	}

	var r0 *github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*github.Repository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.Repository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitHubClient_GetRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepo'
type GitHubClient_GetRepo_Call struct {
	*mock.Call
}

// GetRepo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *GitHubClient_Expecter) GetRepo(_a0 interface{}, _a1 interface{}) *GitHubClient_GetRepo_Call {
	return &GitHubClient_GetRepo_Call{Call: _e.mock.On("GetRepo", _a0, _a1)}
}

func (_c *GitHubClient_GetRepo_Call) Run(run func(_a0 context.Context, _a1 string)) *GitHubClient_GetRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitHubClient_GetRepo_Call) Return(_a0 *github.Repository, _a1 error) *GitHubClient_GetRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitHubClient_GetRepo_Call) RunAndReturn(run func(context.Context, string) (*github.Repository, error)) *GitHubClient_GetRepo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRepos provides a mock function with given fields: _a0, _a1
func (_m *GitHubClient) GetUserRepos(_a0 context.Context, _a1 string) ([]*github.Repository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRepos")
	}

	var r0 []*github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*github.Repository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*github.Repository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitHubClient_GetUserRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRepos'
type GitHubClient_GetUserRepos_Call struct {
	*mock.Call
}

// GetUserRepos is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *GitHubClient_Expecter) GetUserRepos(_a0 interface{}, _a1 interface{}) *GitHubClient_GetUserRepos_Call {
	return &GitHubClient_GetUserRepos_Call{Call: _e.mock.On("GetUserRepos", _a0, _a1)}
}

func (_c *GitHubClient_GetUserRepos_Call) Run(run func(_a0 context.Context, _a1 string)) *GitHubClient_GetUserRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitHubClient_GetUserRepos_Call) Return(_a0 []*github.Repository, _a1 error) *GitHubClient_GetUserRepos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitHubClient_GetUserRepos_Call) RunAndReturn(run func(context.Context, string) ([]*github.Repository, error)) *GitHubClient_GetUserRepos_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitHubClient creates a new instance of GitHubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubClient {
	mock := &GitHubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
